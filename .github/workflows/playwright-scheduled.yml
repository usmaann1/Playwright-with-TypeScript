name: Playwright Tests Scheduled job
on:
  schedule:
    - cron: '0 */6 * * *'  # Runs At minute 0 past every 4th hour.
  workflow_dispatch:  # Allows manual triggering

jobs:
  test:
    timeout-minutes: 500
    runs-on: large-runner
    permissions:
      contents: read
      pull-requests: read
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetches the full history and tags
        tags: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install
      
    - name: json summary reporter
      run: npm install playwright-json-summary-reporter
      
    - name: Install Playwright Browsers
      run: npx playwright install

   
    - name: Run Playwright tests
      run: APP_URL=${{ env.APP_URL}} npx playwright test --reporter=json > summary.json || true
      
    - name: List files in directory
      run: ls -la

    - name: Check for summary.json
      run: |
        if [ -f summary.json ]; then
          echo "summary.json exists."
        else
          echo "summary.json does not exist."
        fi
    - name: Upload Playwright Summary Report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: playwright-summary
        path: summary.json  # Adjust path if necessary
    
    - name: Count Test Cases
      id: count-tests
      run: |
        # Check the structure of the JSON file for correctness
        jq '.' summary.json

    - name: Read Summary Report to Get Test Results
      if: always()
      run: |
        PASSED=$(jq '[.suites[]?.suites[]?.specs[]?.tests[]?.results[]? | select(.status=="passed")] | length' summary.json)
        FAILED=$(jq '[.suites[]?.suites[]?.specs[]?.tests[]?.results[]? | select(.status=="failed")] | length' summary.json)
        echo "PASSED=$PASSED" >> $GITHUB_ENV 
        echo "FAILED=$FAILED" >> $GITHUB_ENV

    - name: Get Titles of Failed Test Cases
      run: |
        FAILED_TITLES=$(jq -r '[.suites[]?.suites[]?.specs[]? | select(.ok == false) | "#### " + .title + " #$##"] | join("\n")' summary.json)
        echo -e "Failed Test Titles:\n$FAILED_TITLES"
        echo "$FAILED_TITLES" > failed-tests.txt  # Save the titles to a file
        echo "FAILED_TITLES<<EOF" >> $GITHUB_ENV
        echo "$FAILED_TITLES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Upload Failed Test Titles as artifact
      uses: actions/upload-artifact@v4
      with:
        name: failed-test-titles
        path: failed-tests.txt

    - name: Get baseURL from Playwright Config
      id: extract-baseurl
      run: |
        # Extract the baseURL from the Playwright config file using grep
        BASE_URL=$(grep -Po '(?<=baseURL: ")[^"]*' playwright.config.js)
        echo "Extracted baseURL: $BASE_URL"
        echo "BASE_URL=$BASE_URL" >> $GITHUB_ENV

    - name: Show Tags
      run: |
        git fetch --tags  # Ensure all tags are up-to-date
        git tag  # List tags to confirm they are present

    - name: Show Commit History
      run: git log --oneline -n 10

    - name: Determine Current Version
      id: get_version
      run: |
        CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
        echo "Current Version: $CURRENT_VERSION"

    - name: Determine Previous Version
      id: get_previous_version
      run: |
        PREVIOUS_VERSION=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "None")
        echo "PREVIOUS_VERSION=$PREVIOUS_VERSION" >> $GITHUB_ENV
        echo "Previous Version: $PREVIOUS_VERSION"
    
    - name: Get Changes from Last Version
      id: get_changes
      run: |
        if [ "$PREVIOUS_VERSION" != "None" ]; then
          CHANGES=$(git log $PREVIOUS_VERSION..HEAD --oneline | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "CHANGES=$CHANGES" >> $GITHUB_ENV
          echo "Changes since last version ($PREVIOUS_VERSION):"
          echo "$CHANGES"
        else
          echo "CHANGES=No changes since the first version." >> $GITHUB_ENV
          echo "No changes since the first version."
        fi

    - name: Get Last Commit Message
      id: last_commit
      run: |
        LAST_COMMIT_MESSAGE=$(git log -1 --pretty=%B | sed ':a;N;$!ba;s/\n/\\n/g')
        echo "LAST_COMMIT_MESSAGE=$LAST_COMMIT_MESSAGE" >> $GITHUB_ENV
        echo "Last Commit Message: $LAST_COMMIT_MESSAGE"

    - name: Echo Current, Previous Version, and Changes
      run: |
        echo "Current Version: ${{ env.CURRENT_VERSION }}"
        echo "Previous Version: ${{ env.PREVIOUS_VERSION }}"
        echo "Changes since last version: ${{ env.CHANGES }}"

    - name: Install GitHub CLI
      run: sudo apt-get install -y gh

    - name: Get Latest Merged PR Details
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        PR_DATA=$(gh pr list --repo ${{ github.repository }} --state merged --json title,author --limit 1 --jq '.[0]')
        PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')
        PR_AUTHOR=$(echo "$PR_DATA" | jq -r '.author.login')
        echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
        echo "PR_AUTHOR=$PR_AUTHOR" >> $GITHUB_ENV

    - name: Display PR details
      run: |
        echo "PR Title: ${{ env.PR_TITLE }}"
        echo "PR Author: ${{ env.PR_AUTHOR }}"




    - name: Send Slack Notification
      if: always()
      uses: 8398a7/action-slack@v3 
      with:
          status: custom
          fields: repo,eventName,workflow,job,took
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : 'danger',
                title: `Playwright Automation Results :test_tube:`,
                fields: [{
                  title: 'Site Under Test',
                  value: `${{ env.BASE_URL || null }}`,
                  short: true
                },
                {
                  title: 'Triggered By',
                  value: [{'origin': 'pull_request', 'new': 'Pull Request'}, {'origin': 'schedule', 'new': 'Schedule'}, {'origin': 'repository_dispatch', 'new': 'Deploy'}, {'origin': 'workflow_dispatch', 'new': 'GitHub Actions'}].find(item => item.origin === `${process.env.AS_EVENT_NAME}`).new || `${process.env.AS_EVENT_NAME}`,
                  short: true
                },
                {
                  title: 'Execution Time',
                  value: `${process.env.AS_TOOK || null }`,
                  short: true
                },
                {
                  title: 'Workflow',
                  value: `${process.env.AS_WORKFLOW || null }`,
                  short: true
                },
                {
                  title: 'Last PR Title',
                  value: `${process.env.PR_TITLE || null }`,
                  short: true
                },
                {
                  title: 'Last PR Author:',
                  value: `${process.env.PR_AUTHOR || null }`,
                  short: true
                },
                {
                  title: 'PASSED',
                  value: `${{env.PASSED || 0 }}`,
                  short: true
                },
                {
                  title: 'Failed',
                  value: `${{env.FAILED || 0 }}`,
                  short: true
                }]
              }]
            }  
      env:
          SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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