name: Playwright Tests Scheduled job
on:
  schedule:
    - cron: '0 */6 * * *'  # Runs At minute 0 past every 4th hour.
  workflow_dispatch:  # Allows manual triggering

jobs:
  test:
    timeout-minutes: 500
    runs-on: large-runner
    permissions:
      contents: read
      actions: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install
      
    - name: json summary reporter
      run: npm install playwright-json-summary-reporter
      
    - name: Install Playwright Browsers
      run: npx playwright install

   
    - name: Run Playwright tests
      run: APP_URL=${{ env.APP_URL}} npx playwright test --reporter=json > summary.json || true
      
    - name: List files in directory
      run: ls -la

    - name: Check for summary.json
      run: |
        if [ -f summary.json ]; then
          echo "summary.json exists."
        else
          echo "summary.json does not exist."
        fi
    - name: Upload Playwright Summary Report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: playwright-summary
        path: summary.json  # Adjust path if necessary
    
    - name: Count Test Cases
      id: count-tests
      run: |
        # Check the structure of the JSON file for correctness
        jq '.' summary.json

    - name: Read Summary Report to Get Test Results
      if: always()
      run: |
        PASSED=$(jq '[.suites[]?.suites[]?.specs[]?.tests[]?.results[]? | select(.status=="passed")] | length' summary.json)
        FAILED=$(jq '[.suites[]?.suites[]?.specs[]?.tests[]?.results[]? | select(.status=="failed")] | length' summary.json)
        echo "PASSED=$PASSED" >> $GITHUB_ENV 
        echo "FAILED=$FAILED" >> $GITHUB_ENV

    - name: Get Titles of Failed Test Cases
      run: |
        FAILED_TITLES=$(jq -r '[.suites[]?.suites[]?.specs[]? | select(.ok == false) | "#### " + .title + " #$##"] | join("\n")' summary.json)
        echo -e "Failed Test Titles:\n$FAILED_TITLES"
        echo "$FAILED_TITLES" > failed-tests.txt  # Save the titles to a file
        echo "FAILED_TITLES<<EOF" >> $GITHUB_ENV
        echo "$FAILED_TITLES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Upload Failed Test Titles as artifact
      uses: actions/upload-artifact@v4
      with:
        name: failed-test-titles
        path: failed-tests.txt 



    - name: Send Slack Notification
      if: always()
      uses: 8398a7/action-slack@v3 
      with:
          status: custom
          fields: repo,eventName,workflow,job,took
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : 'danger',
                title: `Playwright Automation Results :test_tube:`,
                fields: [{
                  title: 'Site Under Test',
                  value: 'play.juicemind.com',
                  short: true
                },
                {
                  title: 'Triggered By',
                  value: [{'origin': 'pull_request', 'new': 'Pull Request'}, {'origin': 'schedule', 'new': 'Schedule'}, {'origin': 'repository_dispatch', 'new': 'Deploy'}, {'origin': 'workflow_dispatch', 'new': 'GitHub Actions'}].find(item => item.origin === `${process.env.AS_EVENT_NAME}`).new || `${process.env.AS_EVENT_NAME}`,
                  short: true
                },
                {
                  title: 'Execution Time',
                  value: `${process.env.AS_TOOK}`,
                  short: true
                },
                {
                  title: 'Workflow',
                  value: `${process.env.AS_WORKFLOW}`,
                  short: true
                },
                {
                  title: 'PASSED',
                  value: `${{env.PASSED}}`,
                  short: true
                },
                {
                  title: 'Failed',
                  value: `${{env.FAILED}}`,
                  short: true
                }]
              }]
            }  
      env:
          SLACK_WEBHOOK_URL: https://hooks.slack.com/services/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




     
