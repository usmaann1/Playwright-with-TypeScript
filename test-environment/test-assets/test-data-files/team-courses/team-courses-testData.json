{  
  "createTestType": "Input Output Test - Ignore",
  "createTestOldType": "Match - Expected output is",
  "createTestNewType": "Match - Expected output is",
  "createTestName": "Test",
  "testInput": "console.log('This is a Test!!!');",
  "testOutput": "This is a Test!!!",
  "firstName": "test",
  "LastName": "test",
  "completeName": "test test",
  "uploadFilePath": "./test-environment/test-assets/test-resource-files/teamUploadTest.js",
  "projectTypeOption1": "Javascript (Node.js)",
  "projectTypeOption2": "Python with Turtle",
  "projectTypeOption3": "Python with Pygame",
  "projectTypeOption4": "Python with Tkinter",
  "projectTypeOption5": "Python with PyQT",
  "projectTypeOption6": "Python with Matplotlib",
  "projectTypeOption7": "Python with Pillow",
  "projectTypeOption8": "Python",
  "projectTypeOption9": "Java",
  "projectTypeOption10": "C#",
  "projectTypeOption11": "C++",
  "ProjectTypeOption12": "HTML/CSS/JS",
  "ProjectTypeOption13": "Java with Swing",
  "projectTypeOPtion14": "Python with Pillow",
  "projectTypeOPtion15": "Python traditional",
  "projectTypeOPtion16": "Java traditional",
  "pythonTestInput": "def square_numbers(numbers):\n    return [num ** 2 for num in numbers]\n\nnumbers = [1, 2, 3, 4, 5]\nsquares = square_numbers(numbers)\nprint('Original numbers:', numbers)\nprint('Squared numbers:', squares)",
  "pythonTestOutput": "Original numbers: [1, 2, 3, 4, 5]\nSquared numbers: [1, 4, 9, 16, 25]",
  "javaTestInput":"public class Main {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        int[] squares = new int[numbers.length];\n        \n        for (int i = 0; i < numbers.length; i++) {\n            squares[i] = numbers[i] * numbers[i];\n        }\n        \n        System.out.println(\"Original numbers: \");\n        for (int num : numbers) {\n            System.out.print(num + \" \");\n        }\n        \n        System.out.println(\"\\nSquared numbers: \");\n        for (int square : squares) {\n            System.out.print(square + \" \");\n        }\n    }\n}",
  "javaTestOutput": "Original numbers: \n1 2 3 4 5 \nSquared numbers: \n1 4 9 16 25 ",
  "csharpTestInput": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int[] numbers = {1, 2, 3, 4, 5};\n        int[] squares = new int[numbers.Length];\n        \n        for (int i = 0; i < numbers.Length; i++)\n        {\n            squares[i] = numbers[i] * numbers[i];\n        }\n        \n        Console.WriteLine(\"Original numbers:\");\n        foreach (int num in numbers)\n        {\n            Console.Write(num + \" \");\n        }\n        \n        Console.WriteLine(\"\\nSquared numbers:\");\n        foreach (int square in squares)\n        {\n            Console.Write(square + \" \");\n        }\n    }\n}",
  "csharpTestOutput": "Original numbers:\n1 2 3 4 5 \nSquared numbers:\n1 4 9 16 25 ",
  "cppTestInput": "#include <iostream>\n\nint main() {\n    int numbers[] = {1, 2, 3, 4, 5};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n    int squares[size];\n    \n    for (int i = 0; i < size; i++) {\n        squares[i] = numbers[i] * numbers[i];\n    }\n    \n    std::cout << \"Original numbers: \";\n    for (int i = 0; i < size; i++) {\n        std::cout << numbers[i] << \" \";\n    }\n    \n    std::cout << \"\\nSquared numbers: \";\n    for (int i = 0; i < size; i++) {\n        std::cout << squares[i] << \" \";\n    }\n    \n    return 0;\n}",
  "cppTestOutput": "Original numbers: 1 2 3 4 5 \nSquared numbers: 1 4 9 16 25 ",
  "AssertionText": "Original numbers:",
  "RedColor": "red",
  "AssetsPaths": "./test-environment/test-assets/test-resource-files/",
  "BtnClickedTest": "Button Greet Test",
  "PythonValidation": "Squared numbers: [1, 4, 9, 16, 25]",
  "HTMLTestInput": "<!DOCTYPE html><html><head><title>Page Title</title><link href='styles.css' rel='stylesheet' /></head><body><h1>Hello World!!!</h1><p>what a lovely day</p><script src='script.js'></script></body></html>",
  "HTMLTestOutput": "what a lovely day",
  "PythonFile": "./test-environment/test-assets/test-resource-files/main.py",
  "JavaFile": "./test-environment/test-assets/test-resource-files/Main.java",
  "CSharpFile": "./test-environment/test-assets/test-resource-files/main.cs",
  "CPPFile": "./test-environment/test-assets/test-resource-files/main.cpp",
  "JSFile": "./test-environment/test-assets/test-resource-files/index.js",
  "HTMLFile": "./test-environment/test-assets/test-resource-files/testFile.zip",
  "JPGFile": "./test-environment/test-assets/test-resource-files/fileTest.jpg",
  "PNGFile": "./test-environment/test-assets/test-resource-files/fileTest.png",
  "CSVFile": "./test-environment/test-assets/test-resource-files/fileTest.csv",
  "HTMLFileUploadTest": "this is a test",
  "ZoomOut": "50%",
  "CSVFileName": "fileTest.csv",
  "MenuItem": "menuItem",
  "UploadZip": "Upload zip",
  "TestJPG": "fileTest.jpg",
  "TestPNG": "fileTest.png",
  "ImagesTextAssertion": "TEST",
  "TestGeneratedFile": "generated_image.jpg",
  "TestJavaTraditional": "class Main { public static void main(String[] args) { int count = 1; count++; System.out.println(count); } }",
  "TestTraditonalOutput": "2",
  "NewFileJS": "./test-environment/test-assets/test-resource-files/testjs.js",
  "NewFilePY": "./test-environment/test-assets/test-resource-files/testpy.py",
  "NewFileJAVA": "./test-environment/test-assets/test-resource-files/Helper.java",
  "NewFileJAVASwing": "./test-environment/test-assets/test-resource-files/HelperSwing.java",
  "NewFileCSHARP": "./test-environment/test-assets/test-resource-files/Helper.cs",
  "NewFileHTML": "./test-environment/test-assets/test-resource-files/Helper.js",
  "NewFileCPP": "./test-environment/test-assets/test-resource-files/testcpp.cpp",
  "ChangeJSFile": "testjs/testjs.js",
  "ChangePYFile": "testpy/testpy.py",
  "ChangeJAVAFile": "testjava/testjava.java",
  "ChangeCSFile": "testcs/testcs.cs",
  "ChangeCPPFile": "testcpp/testcpp.cpp",
  "ChangedFileOutput": "this is a test",
  "ChangedFilePath": "./test-environment/test-assets/test-resource-files/TestChangedFiles.zip",
  "FileStructureJava": "import Helper.Helper; public class Main { public static void main(String[] args) { Helper helper = new Helper(); System.out.println(helper.getTestMessage()); } }",
  "FileStructureCSharp": "using Helpers; class Program { static void Main() { Helper helper = new Helper(); string message = helper.Greet(\"test\"); System.Console.WriteLine(message); } }",
  "FileStructureHTML": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Helper Example</title>\n    <script src=\"Helper/Helper.js\" defer></script>\n</head>\n<body>\n    <h1>Helper Example</h1>\n    <p id=\"greetingMessage\"></p>\n    <script>\n        // Ensure that the script runs after the page is fully loaded\n        document.addEventListener('DOMContentLoaded', () => {\n            const greetingMessage = document.getElementById('greetingMessage');\n            \n            // Use the Helper class to get a greeting message\n            const helper = new Helper();\n            const message = helper.greet('test');\n            greetingMessage.textContent = message;\n        });\n    </script>\n</body>\n</html>",
  "FileStructureSwing": "import HelperSwing.HelperSwing; import javax.swing.*; import javax.swing.event.ChangeEvent; import javax.swing.event.ChangeListener; import java.awt.*; public class Main { public static void main(String[] args) { SwingUtilities.invokeLater(() -> new ColorMixerFrame()); } public static class ColorMixerFrame extends JFrame { private JSlider sliderRed, sliderGreen, sliderBlue; private JPanel colorDisplayPanel; public ColorMixerFrame() { super(\"Color Mixer\"); setLayout(new BorderLayout()); sliderRed = new JSlider(JSlider.HORIZONTAL, 0, 255, 0); sliderGreen = new JSlider(JSlider.HORIZONTAL, 0, 255, 0); sliderBlue = new JSlider(JSlider.HORIZONTAL, 0, 255, 0); setupSlider(sliderRed); setupSlider(sliderGreen); setupSlider(sliderBlue); ColorChangeListener colorChangeListener = new ColorChangeListener(); sliderRed.addChangeListener(colorChangeListener); sliderGreen.addChangeListener(colorChangeListener); sliderBlue.addChangeListener(colorChangeListener); colorDisplayPanel = new JPanel(); colorDisplayPanel.setBackground(HelperSwing.getDefaultColor()); add(sliderRed, BorderLayout.NORTH); add(sliderGreen, BorderLayout.CENTER); add(sliderBlue, BorderLayout.SOUTH); add(colorDisplayPanel, BorderLayout.EAST); setSize(400, 400); setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setVisible(true); } private void setupSlider(JSlider slider) { slider.setMajorTickSpacing(50); slider.setPaintTicks(true); slider.setPaintLabels(true); } private class ColorChangeListener implements ChangeListener { @Override public void stateChanged(ChangeEvent e) { int red = sliderRed.getValue(); int green = sliderGreen.getValue(); int blue = sliderBlue.getValue(); colorDisplayPanel.setBackground(new Color(red, green, blue)); } } } }"
}
