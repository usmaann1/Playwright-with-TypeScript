const { PlaywrightCore, UserFunctions } = require('../../../module-imports/helperFunctions.imports')
const { test, expect } = require('../../../module-imports/testFixtures.imports')
import CLtd from '../../test-assets/test-data-files/create-lesson/create-lesson-testData.json'
import CTtd from '../../test-assets/test-data-files/create-teams/create-teams-testData.json'
const { TeamCoursesPage } = require("../../../pages/team-courses/team-courses.page")
const { CreateLesson } = require("../../../pages/create-lesson/create-lesson.page");
import TeamCoursesData from "../../test-assets/test-data-files/team-courses/team-courses-testData.json";
import Credentials from "../../test-assets/test-data-files/Credentials/credentials.json";
require('dotenv').config()

test.describe('TestSuite: Create Lesson Multiple Choice', () => {

    const randomNumber = UserFunctions.generateRandomString(5)
    const userEmail = Credentials.EMAIL_HASSAAN
    const userPwd = Credentials.PASSWORD_HASSAAN
    const teamName = CLtd.teamName + randomNumber
    const lessonName = CLtd.lessonName + '-' + randomNumber

    test.beforeEach(async ({ loginPage, createTeams, createLesson }) => {
        await loginPage.NavigateToLoginPage()
        await loginPage.fillCredentialsAndLogin(userEmail, userPwd)
        await expect(loginPage.ProfilePicture).toBeVisible()
        await expect(createTeams.TeamsCoursesBtn).toHaveText(CTtd.TeamsCoursesBtnValue)
        await PlaywrightCore.click(createTeams.TeamsCoursesBtn)
        await createTeams.createNewTeamFromScratch(teamName)
        await createLesson.clickOnAddNewItem()
        await createLesson.selectLessonItemType()
        await createLesson.createALesson(lessonName)
        await createLesson.setVisibility()
        await createLesson.hoverOverFirstRow()
        await createLesson.hoverAndClickOnPlusBtn()
        await expect(createLesson.dropDownContainer).toBeVisible()
    });

    test('TC - Create Lesson Insert - Multiple Choice', async ({ createLesson }) => {
        await createLesson.selectElementFromDropdown(CLtd.elements.multipleChoice)
        await PlaywrightCore.click(createLesson.MultipleChoiceQuestionHeadingBox)
        await PlaywrightCore.fill(createLesson.MultipleChoiceQuestionHeadingBox, CLtd.Heading1plus1)
        await PlaywrightCore.click(createLesson.MultipleChoiceFormBox4DeleteBtn)
        await PlaywrightCore.click(createLesson.MultipleChoiceAddChoiceBtn)
        await PlaywrightCore.fill(createLesson.MultipleChoiceFormBox1, CLtd.One)
        await PlaywrightCore.fill(createLesson.MultipleChoiceFormBox2, CLtd.Two)
        await PlaywrightCore.fill(createLesson.MultipleChoiceFormBox3, CLtd.Three)
        await PlaywrightCore.fill(createLesson.MultipleChoiceFormBox4.nth(0), CLtd.Four)
        await PlaywrightCore.click(createLesson.MultipleChoiceSelectBox2)
        await expect(createLesson.MultipleChoiceSelectBox2).toBeVisible()
        await expect(createLesson.MultipleChoiceFormBox1).toHaveText(CLtd.One)
        await expect(createLesson.MultipleChoiceFormBox2).toHaveText(CLtd.Two)
        await expect(createLesson.MultipleChoiceFormBox3).toHaveText(CLtd.Three)
        await expect(createLesson.MultipleChoiceFormBox4.nth(0)).toHaveText(CLtd.Four)
        await PlaywrightCore.click(createLesson.OptionsBtn)
        await expect(createLesson.MultipleChoiceOptionsRule1).toHaveText(CLtd.MultipleChoiceOptionsRule1Value)
        await expect(createLesson.MultipleChoiceOptionsRule2).toHaveText(CLtd.MultipleChoiceOptionsRule2Value)
        await expect(createLesson.MultipleChoiceOptionsRule3).toHaveText(CLtd.MultipleChoiceOptionsRule3Value)
        await expect(createLesson.MultipleChoiceOptionsRule4).toHaveText(CLtd.MultipleChoiceOptionsRule4Value)
        await expect(createLesson.MultipleChoiceOptionsRule5).toHaveText(CLtd.MultipleChoiceOptionsRule5Value)
        await PlaywrightCore.click(createLesson.OptionsCheckBox1)
        await PlaywrightCore.click(createLesson.OptionsCheckBox3)
        await PlaywrightCore.click(createLesson.OptionsCheckBox4)
        await PlaywrightCore.click(createLesson.OptionsCheckBox5)
        await PlaywrightCore.click(createLesson.OptionsCheckBox1)
        await PlaywrightCore.click(createLesson.OptionsCheckBox3)
        await PlaywrightCore.click(createLesson.OptionsCheckBox4)
        await PlaywrightCore.click(createLesson.OptionsCheckBox5)
        await PlaywrightCore.click(createLesson.SetupBtn)
        await createLesson.DeleteElementFromEditor(CLtd.options.Delete)
    });

    test('TC - Create Lesson Insert - Multiple Choice - Presentation Mode - Wrong Answer', async ({ createLesson }) => {
        await createLesson.selectElementFromDropdown(CLtd.elements.multipleChoice)
        await PlaywrightCore.click(createLesson.MultipleChoiceQuestionHeadingBox)
        await PlaywrightCore.fill(createLesson.MultipleChoiceQuestionHeadingBox, CLtd.Heading1plus1)
        await PlaywrightCore.click(createLesson.MultipleChoiceFormBox4DeleteBtn)
        await PlaywrightCore.click(createLesson.MultipleChoiceAddChoiceBtn)
        await PlaywrightCore.fill(createLesson.MultipleChoiceFormBox1, CLtd.One)
        await PlaywrightCore.fill(createLesson.MultipleChoiceFormBox2, CLtd.Two)
        await PlaywrightCore.fill(createLesson.MultipleChoiceFormBox3, CLtd.Three)
        await PlaywrightCore.fill(createLesson.MultipleChoiceFormBox4.nth(0), CLtd.Four)
        await PlaywrightCore.click(createLesson.MultipleChoiceSelectBox2)
        await expect(createLesson.MultipleChoiceSelectBox2).toBeVisible()
        await expect(createLesson.MultipleChoiceFormBox1).toHaveText(CLtd.One)
        await expect(createLesson.MultipleChoiceFormBox2).toHaveText(CLtd.Two)
        await expect(createLesson.MultipleChoiceFormBox3).toHaveText(CLtd.Three)
        await expect(createLesson.MultipleChoiceFormBox4.nth(0)).toHaveText(CLtd.Four)
        await PlaywrightCore.click(createLesson.OptionsBtn)
        await expect(createLesson.MultipleChoiceOptionsRule1).toHaveText(CLtd.MultipleChoiceOptionsRule1Value)
        await expect(createLesson.MultipleChoiceOptionsRule2).toHaveText(CLtd.MultipleChoiceOptionsRule2Value)
        await expect(createLesson.MultipleChoiceOptionsRule3).toHaveText(CLtd.MultipleChoiceOptionsRule3Value)
        await expect(createLesson.MultipleChoiceOptionsRule4).toHaveText(CLtd.MultipleChoiceOptionsRule4Value)
        await expect(createLesson.MultipleChoiceOptionsRule5).toHaveText(CLtd.MultipleChoiceOptionsRule5Value)
        await PlaywrightCore.click(createLesson.OptionsCheckBox1)
        await PlaywrightCore.click(createLesson.OptionsCheckBox3)
        await PlaywrightCore.click(createLesson.OptionsCheckBox4)
        await PlaywrightCore.click(createLesson.OptionsCheckBox5)
        await PlaywrightCore.click(createLesson.OptionsCheckBox1)
        await PlaywrightCore.click(createLesson.OptionsCheckBox3)
        await PlaywrightCore.click(createLesson.OptionsCheckBox4)
        await PlaywrightCore.click(createLesson.OptionsCheckBox5)
        await PlaywrightCore.click(createLesson.SetupBtn)
        await expect(createLesson.PointsTxt).toHaveText(CLtd.PointsTxtValue)
        await PlaywrightCore.fill(createLesson.MultipleChoicePointsInput, CLtd.Four)
        await PlaywrightCore.click(createLesson.presnetationMode)
        await expect(createLesson.PresentationModePopUpHeading).toHaveText(CLtd.PresentationModePopUpHeadingValue)
        await expect(createLesson.PresentationModePopUpDescription).toHaveText(CLtd.PresentationModePopUpDescriptionValue)
        await expect(createLesson.GotItBtn).toHaveText(CLtd.GotItBtnValue)
        await PlaywrightCore.click(createLesson.GotItBtn)
        await expect(createLesson.ExitStudentModeBtn).toHaveText(CLtd.ExitStudentModeBtnValue)
        await expect(createLesson.CheckAnswerBtn).toHaveText(CLtd.CheckAnswerBtnValue)
        await PlaywrightCore.click(createLesson.PresentationModeOpt1CheckBox)
        await PlaywrightCore.click(createLesson.CheckAnswerBtn)
        await expect(createLesson.IncorrectAndCorrectAnswerHeading).toHaveText(CLtd.IncorrectAnswerTxt)
        await expect(createLesson.PointScoreMsg).toHaveText(CLtd.PointScore0Txt)
        await expect(createLesson.CloseBtn).toHaveText(CLtd.CloseBtnValue)
        await PlaywrightCore.click(createLesson.CloseBtn)
        await expect(createLesson.IncorrectMsg).toHaveText(CLtd.IncorrectMsgValue)
        await PlaywrightCore.click(createLesson.ExitStudentModeBtn)
    });

    test('TC - Create Lesson Insert - Multiple Choice - Presentation Mode - Correct Answer', async ({ createLesson }) => {
        await createLesson.selectElementFromDropdown(CLtd.elements.multipleChoice)
        await PlaywrightCore.click(createLesson.MultipleChoiceQuestionHeadingBox)
        await PlaywrightCore.fill(createLesson.MultipleChoiceQuestionHeadingBox, CLtd.Heading1plus1)
        await PlaywrightCore.click(createLesson.MultipleChoiceFormBox4DeleteBtn)
        await PlaywrightCore.click(createLesson.MultipleChoiceAddChoiceBtn)
        await PlaywrightCore.fill(createLesson.MultipleChoiceFormBox1, CLtd.One)
        await PlaywrightCore.fill(createLesson.MultipleChoiceFormBox2, CLtd.Two)
        await PlaywrightCore.fill(createLesson.MultipleChoiceFormBox3, CLtd.Three)
        await PlaywrightCore.fill(createLesson.MultipleChoiceFormBox4.nth(0), CLtd.Four)
        await PlaywrightCore.click(createLesson.MultipleChoiceSelectBox2)
        await expect(createLesson.MultipleChoiceSelectBox2).toBeVisible()
        await expect(createLesson.MultipleChoiceFormBox1).toHaveText(CLtd.One)
        await expect(createLesson.MultipleChoiceFormBox2).toHaveText(CLtd.Two)
        await expect(createLesson.MultipleChoiceFormBox3).toHaveText(CLtd.Three)
        await expect(createLesson.MultipleChoiceFormBox4.nth(0)).toHaveText(CLtd.Four)
        await PlaywrightCore.click(createLesson.OptionsBtn)
        await expect(createLesson.MultipleChoiceOptionsRule1).toHaveText(CLtd.MultipleChoiceOptionsRule1Value)
        await expect(createLesson.MultipleChoiceOptionsRule2).toHaveText(CLtd.MultipleChoiceOptionsRule2Value)
        await expect(createLesson.MultipleChoiceOptionsRule3).toHaveText(CLtd.MultipleChoiceOptionsRule3Value)
        await expect(createLesson.MultipleChoiceOptionsRule4).toHaveText(CLtd.MultipleChoiceOptionsRule4Value)
        await expect(createLesson.MultipleChoiceOptionsRule5).toHaveText(CLtd.MultipleChoiceOptionsRule5Value)
        await PlaywrightCore.click(createLesson.OptionsCheckBox1)
        await PlaywrightCore.click(createLesson.OptionsCheckBox3)
        await PlaywrightCore.click(createLesson.OptionsCheckBox4)
        await PlaywrightCore.click(createLesson.OptionsCheckBox5)
        await PlaywrightCore.click(createLesson.OptionsCheckBox1)
        await PlaywrightCore.click(createLesson.OptionsCheckBox3)
        await PlaywrightCore.click(createLesson.OptionsCheckBox4)
        await PlaywrightCore.click(createLesson.OptionsCheckBox5)
        await PlaywrightCore.click(createLesson.SetupBtn)
        await expect(createLesson.PointsTxt).toHaveText(CLtd.PointsTxtValue)
        await PlaywrightCore.fill(createLesson.MultipleChoicePointsInput, CLtd.Four)
        await PlaywrightCore.click(createLesson.presnetationMode)
        await expect(createLesson.PresentationModePopUpHeading).toHaveText(CLtd.PresentationModePopUpHeadingValue)
        await expect(createLesson.PresentationModePopUpDescription).toHaveText(CLtd.PresentationModePopUpDescriptionValue)
        await expect(createLesson.GotItBtn).toHaveText(CLtd.GotItBtnValue)
        await PlaywrightCore.click(createLesson.GotItBtn)
        await expect(createLesson.ExitStudentModeBtn).toHaveText(CLtd.ExitStudentModeBtnValue)
        await expect(createLesson.CheckAnswerBtn).toHaveText(CLtd.CheckAnswerBtnValue)
        await PlaywrightCore.click(createLesson.PresentationModeOpt2)
        await PlaywrightCore.click(createLesson.CheckAnswerBtn)
        await expect(createLesson.IncorrectAndCorrectAnswerHeading).toHaveText(CLtd.CorrectAnswerTxt)
        await expect(createLesson.PointScoreMsg).toHaveText(CLtd.PointScore4Txt)
        await expect(createLesson.CloseBtn).toHaveText(CLtd.CloseBtnValue)
        await PlaywrightCore.click(createLesson.CloseBtn)
        await expect(createLesson.CorrectMsg).toHaveText(CLtd.CorrectMsgValue)
        await PlaywrightCore.click(createLesson.ExitStudentModeBtn)
    });

    test('TC - Create Lesson Insert - Multiple Choice - Presentation Mode - Correct Answer - Multiple Selections Allowed', async ({ createLesson }) => {
        await createLesson.selectElementFromDropdown(CLtd.elements.multipleChoice)
        await PlaywrightCore.click(createLesson.MultipleChoiceQuestionHeadingBox)
        await PlaywrightCore.fill(createLesson.MultipleChoiceQuestionHeadingBox, CLtd.Heading1plus1)
        await PlaywrightCore.click(createLesson.MultipleChoiceFormBox4DeleteBtn)
        await PlaywrightCore.click(createLesson.MultipleChoiceAddChoiceBtn)
        await PlaywrightCore.fill(createLesson.MultipleChoiceFormBox1, CLtd.One)
        await PlaywrightCore.fill(createLesson.MultipleChoiceFormBox2, CLtd.Two)
        await PlaywrightCore.fill(createLesson.MultipleChoiceFormBox3, CLtd.Three)
        await PlaywrightCore.fill(createLesson.MultipleChoiceFormBox4.nth(0), CLtd.Four)
        await PlaywrightCore.click(createLesson.MultipleChoiceSelectBox2)
        await expect(createLesson.MultipleChoiceSelectBox2).toBeVisible()
        await expect(createLesson.MultipleChoiceFormBox1).toHaveText(CLtd.One)
        await expect(createLesson.MultipleChoiceFormBox2).toHaveText(CLtd.Two)
        await expect(createLesson.MultipleChoiceFormBox3).toHaveText(CLtd.Three)
        await expect(createLesson.MultipleChoiceFormBox4.nth(0)).toHaveText(CLtd.Four)
        await PlaywrightCore.click(createLesson.OptionsBtn)
        await expect(createLesson.MultipleChoiceOptionsRule1).toHaveText(CLtd.MultipleChoiceOptionsRule1Value)
        await expect(createLesson.MultipleChoiceOptionsRule2).toHaveText(CLtd.MultipleChoiceOptionsRule2Value)
        await expect(createLesson.MultipleChoiceOptionsRule3).toHaveText(CLtd.MultipleChoiceOptionsRule3Value)
        await expect(createLesson.MultipleChoiceOptionsRule4).toHaveText(CLtd.MultipleChoiceOptionsRule4Value)
        await expect(createLesson.MultipleChoiceOptionsRule5).toHaveText(CLtd.MultipleChoiceOptionsRule5Value)
        await PlaywrightCore.click(createLesson.OptionsCheckBox1)
        await PlaywrightCore.click(createLesson.OptionsCheckBox3)
        await PlaywrightCore.click(createLesson.OptionsCheckBox4)
        await PlaywrightCore.click(createLesson.OptionsCheckBox5)
        await PlaywrightCore.click(createLesson.OptionsCheckBox1)
        await PlaywrightCore.click(createLesson.OptionsCheckBox3)
        await PlaywrightCore.click(createLesson.OptionsCheckBox5)
        await PlaywrightCore.click(createLesson.SetupBtn)
        await PlaywrightCore.click(createLesson.PresentationModeOpt1CheckBox)
        await expect(createLesson.PointsTxt).toHaveText(CLtd.PointsTxtValue)
        await PlaywrightCore.fill(createLesson.MultipleChoicePointsInput, CLtd.Four)
        await PlaywrightCore.click(createLesson.presnetationMode)
        await expect(createLesson.PresentationModePopUpHeading).toHaveText(CLtd.PresentationModePopUpHeadingValue)
        await expect(createLesson.PresentationModePopUpDescription).toHaveText(CLtd.PresentationModePopUpDescriptionValue)
        await expect(createLesson.GotItBtn).toHaveText(CLtd.GotItBtnValue)
        await PlaywrightCore.click(createLesson.GotItBtn)
        await expect(createLesson.ExitStudentModeBtn).toHaveText(CLtd.ExitStudentModeBtnValue)
        await expect(createLesson.CheckAnswerBtn).toHaveText(CLtd.CheckAnswerBtnValue)
        await PlaywrightCore.click(createLesson.PresentationModeOpt2)
        await PlaywrightCore.click(createLesson.PresentationModeOpt1CheckBox)
        await PlaywrightCore.click(createLesson.CheckAnswerBtn)
        await expect(createLesson.IncorrectAndCorrectAnswerHeading).toHaveText(CLtd.CorrectAnswerTxt)
        await expect(createLesson.PointScoreMsg).toHaveText(CLtd.PointScore4Txt)
        await expect(createLesson.CloseBtn).toHaveText(CLtd.CloseBtnValue)
        await PlaywrightCore.click(createLesson.CloseBtn)
        await expect(createLesson.CorrectMsg).toHaveText(CLtd.CorrectMsgValue)
        await PlaywrightCore.click(createLesson.ExitStudentModeBtn)
    });


    test('TC - Create Lesson Insert - Multiple Choice - Presentation Mode - Correct Answer - Multiple Selections Allowed - Student Mode', async ({ createLesson, teamCoursesPage, browser }) => {
        const randomEmail = UserFunctions.generateRandomEmail(userEmail)
        await createLesson.selectElementFromDropdown(CLtd.elements.multipleChoice)
        await PlaywrightCore.click(createLesson.MultipleChoiceQuestionHeadingBox)
        await PlaywrightCore.fill(createLesson.MultipleChoiceQuestionHeadingBox, CLtd.Heading1plus1)
        await PlaywrightCore.click(createLesson.MultipleChoiceFormBox4DeleteBtn)
        await PlaywrightCore.click(createLesson.MultipleChoiceAddChoiceBtn)
        await PlaywrightCore.fill(createLesson.MultipleChoiceFormBox1, CLtd.One)
        await PlaywrightCore.fill(createLesson.MultipleChoiceFormBox2, CLtd.Two)
        await PlaywrightCore.fill(createLesson.MultipleChoiceFormBox3, CLtd.Three)
        await PlaywrightCore.fill(createLesson.MultipleChoiceFormBox4.nth(0), CLtd.Four)
        await PlaywrightCore.click(createLesson.MultipleChoiceSelectBox2)
        await expect(createLesson.MultipleChoiceSelectBox2).toBeVisible()
        await expect(createLesson.MultipleChoiceFormBox1).toHaveText(CLtd.One)
        await expect(createLesson.MultipleChoiceFormBox2).toHaveText(CLtd.Two)
        await expect(createLesson.MultipleChoiceFormBox3).toHaveText(CLtd.Three)
        await expect(createLesson.MultipleChoiceFormBox4.nth(0)).toHaveText(CLtd.Four)
        await PlaywrightCore.click(createLesson.OptionsBtn)
        await expect(createLesson.MultipleChoiceOptionsRule1).toHaveText(CLtd.MultipleChoiceOptionsRule1Value)
        await expect(createLesson.MultipleChoiceOptionsRule2).toHaveText(CLtd.MultipleChoiceOptionsRule2Value)
        await expect(createLesson.MultipleChoiceOptionsRule3).toHaveText(CLtd.MultipleChoiceOptionsRule3Value)
        await expect(createLesson.MultipleChoiceOptionsRule4).toHaveText(CLtd.MultipleChoiceOptionsRule4Value)
        await expect(createLesson.MultipleChoiceOptionsRule5).toHaveText(CLtd.MultipleChoiceOptionsRule5Value)
        await PlaywrightCore.click(createLesson.OptionsCheckBox1)
        await PlaywrightCore.click(createLesson.OptionsCheckBox3)
        await PlaywrightCore.click(createLesson.OptionsCheckBox4)
        await PlaywrightCore.click(createLesson.OptionsCheckBox5)
        await PlaywrightCore.click(createLesson.OptionsCheckBox1)
        await PlaywrightCore.click(createLesson.OptionsCheckBox3)
        await PlaywrightCore.click(createLesson.OptionsCheckBox5)
        await PlaywrightCore.click(createLesson.SetupBtn)
        await PlaywrightCore.click(createLesson.PresentationModeOpt1CheckBox)
        await expect(createLesson.PointsTxt).toHaveText(CLtd.PointsTxtValue)
        await PlaywrightCore.fill(createLesson.MultipleChoicePointsInput, CLtd.Four)
        await PlaywrightCore.click(createLesson.presnetationMode)
        await expect(createLesson.PresentationModePopUpHeading).toHaveText(CLtd.PresentationModePopUpHeadingValue)
        await expect(createLesson.PresentationModePopUpDescription).toHaveText(CLtd.PresentationModePopUpDescriptionValue)
        await expect(createLesson.GotItBtn).toHaveText(CLtd.GotItBtnValue)
        await PlaywrightCore.click(createLesson.GotItBtn)
        await expect(createLesson.ExitStudentModeBtn).toHaveText(CLtd.ExitStudentModeBtnValue)
        await expect(createLesson.CheckAnswerBtn).toHaveText(CLtd.CheckAnswerBtnValue)
        await PlaywrightCore.click(createLesson.PresentationModeOpt2)
        await PlaywrightCore.click(createLesson.PresentationModeOpt1CheckBox)
        await PlaywrightCore.click(createLesson.CheckAnswerBtn)
        await expect(createLesson.IncorrectAndCorrectAnswerHeading).toHaveText(CLtd.CorrectAnswerTxt)
        await expect(createLesson.PointScoreMsg).toHaveText(CLtd.PointScore4Txt)
        await expect(createLesson.CloseBtn).toHaveText(CLtd.CloseBtnValue)
        await PlaywrightCore.click(createLesson.CloseBtn)
        await expect(createLesson.CorrectMsg).toHaveText(CLtd.CorrectMsgValue)
        await PlaywrightCore.click(createLesson.ExitStudentModeBtn)
        const link = await teamCoursesPage.PublishAndInviteCreateLesson()
        const newPage = await browser.newPage()
        const newTeamCoursesPageInstance = new TeamCoursesPage(newPage)
        const newCreateLessonPageInstance = new CreateLesson(newPage)
        await newTeamCoursesPageInstance.afterInviteSignUp(link,randomEmail,userPwd,TeamCoursesData.firstName,TeamCoursesData.LastName)
        await expect(newCreateLessonPageInstance.OnePlus1TxtPresentationMode).toHaveText(CLtd.Heading1plus1)
        await expect(newCreateLessonPageInstance.OneTxtPresentationMode).toHaveText(CLtd.One)
        await expect(newCreateLessonPageInstance.TwoTxtPresentationMode).toHaveText(CLtd.Two)
        await expect(newCreateLessonPageInstance.ThreeTxtPresentationMode).toHaveText(CLtd.Three)
        await expect(newCreateLessonPageInstance.FourTxtPresentationMode).toHaveText(CLtd.Four)
        await expect(newCreateLessonPageInstance.CheckAnswerBtn).toHaveText(CLtd.CheckAnswerBtnValue)
        await PlaywrightCore.click(newCreateLessonPageInstance.Opt2StudentMode)
        await PlaywrightCore.click(newCreateLessonPageInstance.PresentationModeOptionWrong)
        await PlaywrightCore.click(newCreateLessonPageInstance.CheckAnswerBtn)
        await expect(newCreateLessonPageInstance.IncorrectAndCorrectAnswerHeading).toHaveText(CLtd.CorrectAnswerTxt)
        await expect(newCreateLessonPageInstance.PointScoreMsg).toHaveText(CLtd.PointScore4Txt)
        await expect(newCreateLessonPageInstance.CloseBtn).toHaveText(CLtd.CloseBtnValue)
        await PlaywrightCore.click(newCreateLessonPageInstance.CloseBtn)
        await expect(newCreateLessonPageInstance.CorrectMsg).toHaveText(CLtd.CorrectMsgValue)
    });


})